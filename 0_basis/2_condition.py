var_1 = 10
'''
https://pythonworld.ru/osnovy/instrukciya-if-elif-else-proverka-istinnosti-trexmestnoe-vyrazhenie-ifelse.html
условные конструкции предназначены для разветвления логики кода.
Например, необходимо вывести в консоль сообщение "Привет", но только
при условии, что переменная var_1 будет равна 10. Для этого применяют
конструкцию
<code_0>
if <условие>:
    <code_1>
<code_2>
Данная конструкция всегда начинается с if. Затем идет блок <условие>,
в котором будет указываться условие скабатывания ветвления. Далее, через
символ ":" и с  обязательными отступами на каждой строке идет блок <code>,
где указывается действие, которое должно произойти при срабатывании условия.
Таким образом, если условие выполняется, то выполняется код из блока <code_1>,
а затем начинается выполнение <code_2>. Если же условие не выполняется, то
после выполнения блока <code_0> будет сразу выполняться блок <code_2>.
Еще раз. Условие выполняется -> выполняются следующие команды:
<code_0>
<code_1>
<code_2>
Условие НЕ выполняется -> выполняются:
<code_0>
<code_2>

В нашем примере необходимо написать следующий блок if:'''

if var_1 == 10:
    print("Привет")
'''
Как вы видите, условием является сравнение переменной var_1 с 10:
<var_1 == 10>, которое вернет True, если var_1 равна 10, и вернет False,
если var_1 НЕ равна 10.
В самом простом случае, блок <условие> должен в результате своем возвращать
булево значение True или False.
'''
print('------------------')
# Example 0
if True:
    print('Example 0: True')  # этот принт сработает
if False:
    print('Example 0: False')  # этот принт не будет выполнен


print('------------------')
# Example 1
"""
Так же можно расширить условную конструкцию добавлением блока else.
Данный блок будет срабатывать в тех случаях, когда условие блока if
не будет выполняться. Например:
"""
val_1 = 1
val_2 = 2
if val_1 > val_2:
    print("Example 1:", val_1, ">", val_2)
else:
    print("Example 1:", val_1, "<=", val_2)


print('------------------')
# Example 2
"""
Так же можно расширить условную конструкцию добавлением блока elif.
Этот блок явялется дополнительным к блоку if, и позволяет указать
дополнительное условие, которое будет проверяться в тех случаях, когда
условие предыдущего блока if или elif не будет выполняться. Например:
"""
if val_1 > val_2:
    print("Example 2: val_1 > val_2")
elif val_1 < val_2:
    # если не выполняется val_1 > val_2, то проверяется это условие
    print("Example 2: val_1 < val_2")
elif val_1 == val_2:
    # если не выполняется и val_1 > val_2, и val_1 < val_2
    # то проверяется это условие
    print("Example 2: val_1 == val_2")
else:
    # во всех остальных случаях срабатывает else
    print("else")

"""
else НЕ является обязательной в конструкции if-elif-else.
Вы можете написать простой if, или же связку из if-elif-...-elif,
или же if-else.
"""

# is
# not

print('------------------')
# Example 3
"""
В python так же присутсвуют конструкции is и not. is позволяет
проверить, является ли два объекта одним и тем же объектом, а not - обозначает
простое отрицание, например not False будет значить True
"""
print("Example 3: not False:", not False)  # выведется "not False: True"

print("Example 3: 1 is 1:", 1 is 1)  # возвращает True, вроде все просто, НО....
print('Example 3: 1000 is int("1000"):', 1000 is int("1000"))  # возвращает False!
print('Example 3: 1000 == int("1000"):', 1000 == int("1000"))  # когда простое == - True
# если сравнить два одинаковых списка...
print("Example 3: [1, 2, 3] is [1, 2, 3]:", [1, 2, 3] is [1, 2, 3])  # выведет False
"""
На этот результат влияет особеность хранения значений и структур данных в
python, про структуры данных поговорим в следующих модулях.
Пока что запомните, что происходит сравнение именно что на то, что это ОДИН
и ТОТ ЖЕ объект!
т.е. сверяется не значение 100 и 100, а то, что обе переменных ссылаются
на один и тот же объект. В случае 10000 is 10**4 решающих фактором является
то, что python по-хитрому хранит одинаковые значения, по факту, если две
переменных хранят одно и то же значение, то и объект у них будет один, но как
только одна из переменных изменит свое значение - они будут работать с разными
объектами.
"""

print('------------------')
# Example 4
val_1 = 'asd'
if type(val_1) is int:  # проверим, что val_1 интовская переменная
    print("Example 4:", val_1, "- int")
elif type(val_1) is not str:  # проверим, что val_1 не строковая переменная
    print("Example 4:", val_1, "- not str")
elif type(val_1) is not None:  # проверим, что val_1 не None
    print("Example 4:", val_1, "- not None")

val_1 = 1
val_2 = 2

# and or

print('------------------')
# Example 5
"""
В python присутствуют конструкции and и or.
Имеют соответствующее названиям значения -
and - аналог логического И
or - аналог логического ИЛИ
т.е.:
      X       =  |   and   |  or    |
False X False == |  False  | False  |
False X True  == |  False  | True   |
True  X False == |  False  | True   |
True  X True  == |  True   | True   |
"""

if val_1 == 1 and val_2 != 2:
    print("Example 5: val_1 == 1 and val_2 != 2")

if val_1 == 1 or val_2 != 2:
    print("Example 5: val_1 == 1 and val_2 != 2")

print('------------------')
# Example 6
'''
можно реализовывать многострочные условия с помощью символа \ в конце
строки. Или же объединяя условие в ().
Символ \ вообще имеет много применений, например в текстовой строке применяется
для обозначения служебных символов, так называемых escape sequence, таких как
символ переноса строки - \n и многие другие. Поэтому в тексте, если вы хотите
написать просто \, то стоит писать \\, тогда он преобразуется на выходе в
одинарный \. Это поможет избежать неосознанных ошибок, например, символ \"
позволяет в строке, созданной с применением символа ", н-р "это текст!",
написать символ " как часть этого текста, а не закрывающие двойные кавычки.
'''
val_1 = 0
val_2 = 1
if (val_1 < 1 or val_1 > 20) and \
        (val_2 == 1 or val_2 != 2):
    print("Example 6: \\")

if ((val_1 < 1 or val_1 > 20) and
        (val_2 == 1 or val_2 != 2)):
    print("Example 6: ()")
